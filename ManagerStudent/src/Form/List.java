/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import java.security.spec.ECPublicKeySpec;
import java.sql.Connection;
import java.sql.DriverManager;

import Objects.NoteList;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mrx
 */
public class List extends javax.swing.JFrame {
    /**
     * Creates new form List
     */
    public List() {
        initComponents();
        btnList1.setVisible(false);
        btnList2.setVisible(false);
        btnList3.setVisible(false);
        btnList4.setVisible(false);
        btnList5.setVisible(false);
        btnList6.setVisible(false);
        btnList7.setVisible(false);
        btnList8.setVisible(false);
        check1.setVisible(false);
        check2.setVisible(false);
        check3.setVisible(false);
        check4.setVisible(false);
        check5.setVisible(false);
        check6.setVisible(false);
        check7.setVisible(false);
        check8.setVisible(false);
        btnCancel.setVisible(false);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }

     public List(MainFor mainForm) {
        checkShowForm=true;
        initComponents();
        btnList1.setVisible(false);
        btnList2.setVisible(false);
        btnList3.setVisible(false);
        btnList4.setVisible(false);
        btnList5.setVisible(false);
        btnList6.setVisible(false);
        btnList7.setVisible(false);
        btnList8.setVisible(false);
        check1.setVisible(false);
        check2.setVisible(false);
        check3.setVisible(false);
        check4.setVisible(false);
        check5.setVisible(false);
        check6.setVisible(false);
        check7.setVisible(false);
        check8.setVisible(false);
        btnCancel.setVisible(false);
        form=mainForm;
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Content = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnList4 = new javax.swing.JButton();
        btnList1 = new javax.swing.JButton();
        btnList3 = new javax.swing.JButton();
        btnList7 = new javax.swing.JButton();
        btnList5 = new javax.swing.JButton();
        btnList6 = new javax.swing.JButton();
        btnList8 = new javax.swing.JButton();
        btnList2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        check1 = new javax.swing.JCheckBox();
        check6 = new javax.swing.JCheckBox();
        check8 = new javax.swing.JCheckBox();
        check2 = new javax.swing.JCheckBox();
        check3 = new javax.swing.JCheckBox();
        check7 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        check4 = new javax.swing.JCheckBox();
        check5 = new javax.swing.JCheckBox();
        btnCancel = new javax.swing.JButton();
        TextNameList = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("List");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Content.setBackground(new java.awt.Color(168, 228, 236));

        btnAdd.setBackground(new java.awt.Color(204, 204, 255));
        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnList4.setBackground(new java.awt.Color(204, 204, 255));
        btnList4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList4ActionPerformed(evt);
            }
        });

        btnList1.setBackground(new java.awt.Color(204, 204, 255));
        btnList1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList1ActionPerformed(evt);
            }
        });

        btnList3.setBackground(new java.awt.Color(204, 204, 255));
        btnList3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList3ActionPerformed(evt);
            }
        });

        btnList7.setBackground(new java.awt.Color(204, 204, 255));
        btnList7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList7ActionPerformed(evt);
            }
        });

        btnList5.setBackground(new java.awt.Color(204, 204, 255));
        btnList5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList5ActionPerformed(evt);
            }
        });

        btnList6.setBackground(new java.awt.Color(204, 204, 255));
        btnList6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList6ActionPerformed(evt);
            }
        });

        btnList8.setBackground(new java.awt.Color(204, 204, 255));
        btnList8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList8ActionPerformed(evt);
            }
        });

        btnList2.setBackground(new java.awt.Color(204, 204, 255));
        btnList2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnList2ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon("D:\\Pictures\\icon\\java projects\\icon-list.png")); // NOI18N

        btnDelete.setBackground(new java.awt.Color(204, 204, 255));
        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        check1.setBackground(new java.awt.Color(204, 204, 255));

        check6.setBackground(new java.awt.Color(204, 204, 255));

        check8.setBackground(new java.awt.Color(204, 204, 255));

        check2.setBackground(new java.awt.Color(204, 204, 255));

        check3.setBackground(new java.awt.Color(204, 204, 255));

        check7.setBackground(new java.awt.Color(204, 204, 255));

        jCheckBox10.setText("jCheckBox1");

        check4.setBackground(new java.awt.Color(204, 204, 255));

        check5.setBackground(new java.awt.Color(204, 204, 255));

        btnCancel.setBackground(new java.awt.Color(204, 204, 255));
        btnCancel.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        TextNameList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        TextNameList.setText("Enter name list");

        javax.swing.GroupLayout ContentLayout = new javax.swing.GroupLayout(Content);
        Content.setLayout(ContentLayout);
        ContentLayout.setHorizontalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnList5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnList1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnList2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnList6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(check6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnList3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnList7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(check7)
                    .addComponent(check3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(check4)
                    .addComponent(check8, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnList8, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnList4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ContentLayout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addGap(4, 4, 4)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TextNameList))
                .addContainerGap())
            .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContentLayout.createSequentialGroup()
                    .addContainerGap(278, Short.MAX_VALUE)
                    .addComponent(jCheckBox10)
                    .addContainerGap(287, Short.MAX_VALUE)))
        );
        ContentLayout.setVerticalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContentLayout.createSequentialGroup()
                        .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextNameList, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContentLayout.createSequentialGroup()
                        .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(check1)
                            .addComponent(check2)
                            .addComponent(check3))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContentLayout.createSequentialGroup()
                        .addComponent(check4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ContentLayout.createSequentialGroup()
                        .addComponent(btnList3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(ContentLayout.createSequentialGroup()
                        .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnList1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnList2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnList4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(check6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(check5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(check7)
                            .addComponent(check8))
                        .addGap(7, 7, 7)))
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnList5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnList6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnList8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnList7, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(117, 117, 117))
            .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContentLayout.createSequentialGroup()
                    .addContainerGap(205, Short.MAX_VALUE)
                    .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(229, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //add button and add data at database
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(count<=8){
            //check data input
            if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                count++;
            }
            //add data at from and add data at database
            //in case 1 2 3 4 5 6 7 8
            if(count==1)
            {
                if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                    //add in database
                    try {
                        String sql="insert into NoteList values ('"+
                                TextNameList.getText()+"',1)";
                        Statement s = con.createStatement();
                        s.executeUpdate(sql);
                    } catch (SQLException ex) {
                        Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    btnList1.setText(TextNameList.getText());
                    btnList1.setVisible(true);
                }
            }
            else
                if(count==2)
                {
                    //add in database
                    if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                        try {
                            String sql="insert into NoteList values ('"+
                                    TextNameList.getText()+"',2)";
                            Statement s = con.createStatement();
                            s.executeUpdate(sql);
                        } catch (SQLException ex) {
                            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        btnList2.setText(TextNameList.getText());
                        btnList2.setVisible(true);
                    }
                }
                else
                    if(count==3)
                    {
                        //add database
                        if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                            try {
                                String sql="insert into NoteList values ('"+
                                        TextNameList.getText()+"',3)";
                                Statement s = con.createStatement();
                                s.executeUpdate(sql);
                            } catch (SQLException ex) {
                                Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            btnList3.setText(TextNameList.getText());
                            btnList3.setVisible(true);
                        }
                    }
                    else
                        if(count==4)
                        {
                            //add in database
                            if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                                try {
                                    String sql="insert into NoteList values ('"+
                                            TextNameList.getText()+"',4)";
                                    Statement s = con.createStatement();
                                    s.executeUpdate(sql);
                                } catch (SQLException ex) {
                                    Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                btnList4.setText(TextNameList.getText());
                                btnList4.setVisible(true);
                            }
                        }
                        else
                            if(count==5)
                            {
                                //add in database
                                if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                                    try {
                                        String sql="insert into NoteList values ('"+
                                                TextNameList.getText()+"',5)";
                                        Statement s = con.createStatement();
                                        s.executeUpdate(sql);
                                    } catch (SQLException ex) {
                                        Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                    btnList5.setText(TextNameList.getText());
                                    btnList5.setVisible(true);
                                }
                            }
                            else
                                if(count==6)
                                {
                                    //add in database
                                    if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                                        try {
                                            String sql="insert into NoteList values ('"+
                                                    TextNameList.getText()+"',6)";
                                            Statement s = con.createStatement();
                                            s.executeUpdate(sql);
                                        } catch (SQLException ex) {
                                            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        btnList6.setText(TextNameList.getText());
                                        btnList6.setVisible(true);
                                    }
                                }
                                else
                                    if(count==7)
                                    {
                                        //add in database
                                        if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                                            try {
                                                String sql="insert into NoteList values ('"+
                                                        TextNameList.getText()+"',7)";
                                                Statement s = con.createStatement();
                                                s.executeUpdate(sql);
                                            } catch (SQLException ex) {
                                                Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                            btnList7.setText(TextNameList.getText());
                                            btnList7.setVisible(true);
                                        }
                                    }
                                    else
                                       if(count==8)
                                       {
                                           //add in database
                                            if(TextNameList.getText().compareTo("Enter name list")!=0 && TextNameList.getText().length()!=0){
                                                try {
                                                    String sql="insert into NoteList values ('"+
                                                            TextNameList.getText()+"',8)";
                                                    Statement s = con.createStatement();
                                                    s.executeUpdate(sql);
                                                } catch (SQLException ex) {
                                                    Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
                                                }
                                                btnList8.setText(TextNameList.getText());
                                                btnList8.setVisible(true);
                                            }
                                    }
            
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /*------------Delete btnList-----------------*/
    //swap the last data at first data just deleted
    //Delete btnList1
    private void DeleteBtnList1(){
        try {
            Statement s = con.createStatement();
            if(check1.isSelected())
            {
                switch (count){
                    case 1:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setVisible(false);
                        check1.setSelected(false);
                        check1.setVisible(false);
                        count--;
                    }
                    break;
                    case 2:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setText(btnList2.getText());
                        noteList1=noteList2;
                        btnList2.setVisible(false);
                        check1.setSelected(check2.isSelected());
                        check2.setVisible(false);
                        count--;
                    }
                    break;
                    case 3:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setText(btnList3.getText());
                        noteList1=noteList3;
                        btnList3.setVisible(false);
                        check1.setSelected(check3.isSelected());
                        check3.setVisible(false);
                        count--;
                    }
                    break;
                    case 4:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setText(btnList4.getText());
                        noteList1=noteList4;
                        btnList4.setVisible(false);
                        check1.setSelected(check4.isSelected());
                        check4.setVisible(false);
                        count--;
                    }
                    break;
                    case 5:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setText(btnList5.getText());
                        noteList1=noteList5;
                        btnList5.setVisible(false);
                        check1.setSelected(check5.isSelected());
                        check5.setVisible(false);
                        count--;
                    }
                    break;
                    case 6:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setText(btnList6.getText());
                        noteList1=noteList6;
                        btnList6.setVisible(false);
                        check1.setSelected(check6.isSelected());
                        check6.setVisible(false);
                        count--;
                    }
                    break;
                    case 7:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setText(btnList7.getText());
                        noteList1=noteList7;
                        btnList7.setVisible(false);
                        check1.setSelected(check7.isSelected());
                        check7.setVisible(false);
                        count--;
                    }
                    break;
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 1;");
                        btnList1.setText(btnList8.getText());
                        noteList1=noteList8;
                        btnList8.setVisible(false);
                        check1.setSelected(check8.isSelected());
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
            }
            if((count+1)!=1){
                s.executeUpdate("update NoteList set ID=1 where ID="+(count+1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //Delete btnList2
    private void DeleteBtnList2(){
        try {
            Statement s = con.createStatement();
            if(check2.isSelected()){
                switch (count){
                    case 2:
                    {
                        s.executeUpdate("delete from NoteList where ID = 2;");
                        btnList2.setVisible(false);
                        check2.setSelected(false);
                        check2.setVisible(false);
                        count--;
                    }
                    break;
                    case 3:
                    {
                        s.executeUpdate("delete from NoteList where ID = 2;");
                        btnList2.setText(btnList3.getText());
                        noteList2=noteList3;
                        btnList3.setVisible(false);
                        check2.setSelected(check3.isSelected());
                        check3.setVisible(false);
                        count--;
                    }
                    break;
                    case 4:
                    {
                        s.executeUpdate("delete from NoteList where ID = 2;");
                        btnList2.setText(btnList4.getText());
                        noteList2=noteList4;
                        btnList4.setVisible(false);
                        check2.setSelected(check4.isSelected());
                        check4.setVisible(false);
                        count--;
                    }
                    break;
                    case 5:
                    {
                        s.executeUpdate("delete from NoteList where ID = 2;");
                        btnList2.setText(btnList5.getText());
                        noteList2=noteList5;
                        btnList5.setVisible(false);
                        check2.setSelected(check5.isSelected());
                        check5.setVisible(false);
                        count--;
                    }
                    break;
                    case 6:
                    {
                        s.executeUpdate("delete from NoteList where ID = 2;");
                        btnList2.setText(btnList6.getText());
                        noteList2=noteList6;
                        btnList6.setVisible(false);
                        check2.setSelected(check6.isSelected());
                        check6.setVisible(false);
                        count--;
                    }
                    break;
                    case 7:
                    {
                        s.executeUpdate("delete from NoteList where ID = 2;");
                        btnList2.setText(btnList7.getText());
                        noteList2=noteList7;
                        btnList7.setVisible(false);
                        check2.setSelected(check7.isSelected());
                        check7.setVisible(false);
                        count--;
                    }
                    break;
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 2;");
                        btnList2.setText(btnList8.getText());
                        noteList2=noteList8;
                        btnList8.setVisible(false);
                        check2.setSelected(check8.isSelected());
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
           }
           if((count+1)!=2){
                s.executeUpdate("update NoteList set ID=2 where ID="+(count+1));
           }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    //Delete btnList3
    private void DeleteBtnList3(){
        try {
            Statement s = con.createStatement();
             if(check3.isSelected()){
                switch (count){
                    case 3:
                    {
                        s.executeUpdate("delete from NoteList where ID = 3;");
                        btnList3.setVisible(false);
                        check3.setSelected(false);
                        check3.setVisible(false);
                        count--;
                    }
                    break;
                    case 4:
                    {
                        s.executeUpdate("delete from NoteList where ID = 3;");
                        btnList3.setText(btnList4.getText());
                        noteList3=noteList4;
                        btnList4.setVisible(false);
                        check3.setSelected(check4.isSelected());
                        check4.setVisible(false);
                        count--;
                    }
                    break;
                    case 5:
                    {
                        s.executeUpdate("delete from NoteList where ID = 3;");
                        btnList3.setText(btnList5.getText());
                        noteList3=noteList5;
                        btnList5.setVisible(false);
                        check3.setSelected(check5.isSelected());
                        check5.setVisible(false);
                        count--;
                    }
                    break;
                    case 6:
                    {
                        s.executeUpdate("delete from NoteList where ID = 3;");
                        btnList3.setText(btnList6.getText());
                        noteList3=noteList6;
                        btnList6.setVisible(false);
                        check3.setSelected(check6.isSelected());
                        check6.setVisible(false);
                        count--;
                    }
                    break;
                    case 7:
                    {
                        s.executeUpdate("delete from NoteList where ID = 3;");
                        btnList3.setText(btnList7.getText());
                        noteList3=noteList7;
                        btnList7.setVisible(false);
                        check3.setSelected(check7.isSelected());
                        check7.setVisible(false);
                        count--;
                    }
                    break;
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 3;");
                        btnList3.setText(btnList8.getText());
                        noteList3=noteList8;
                        btnList8.setVisible(false);
                        check3.setSelected(check8.isSelected());
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
           }
           if((count+1)!=3){
                s.executeUpdate("update NoteList set ID=3 where ID="+(count+1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //Delete btnList4
    private void DeleteBtnList4(){
        try {
            Statement s = con.createStatement();
            if(check4.isSelected()){
                switch (count){
                    case 4:
                    {
                        s.executeUpdate("delete from NoteList where ID = 4;");
                        btnList4.setVisible(false);
                        check4.setSelected(false);
                        check4.setVisible(false);
                        count--;
                    }
                    break;
                    case 5:
                    {
                        s.executeUpdate("delete from NoteList where ID = 4;");
                        btnList4.setText(btnList5.getText());
                        noteList4=noteList5;
                        btnList5.setVisible(false);
                        check4.setSelected(check5.isSelected());
                        check5.setVisible(false);
                        count--;
                    }
                    break;
                    case 6:
                    {
                        s.executeUpdate("delete from NoteList where ID = 4;");
                        btnList4.setText(btnList6.getText());
                        noteList4=noteList6;
                        btnList6.setVisible(false);
                        check4.setSelected(check6.isSelected());
                        check6.setVisible(false);
                        count--;
                    }
                    break;
                    case 7:
                    {
                        s.executeUpdate("delete from NoteList where ID = 4;");
                        btnList4.setText(btnList7.getText());
                        noteList4=noteList7;
                        btnList7.setVisible(false);
                        check4.setSelected(check7.isSelected());
                        check7.setVisible(false);
                        count--;
                    }
                    break;
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 4;");
                        btnList4.setText(btnList8.getText());
                        noteList4=noteList8;
                        btnList8.setVisible(false);
                        check4.setSelected(check8.isSelected());
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
           }
           if((count+1)!=4){
                s.executeUpdate("update NoteList set ID=4 where ID="+(count+1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    //Delete btnList5
    private void DeleteBtnList5(){
        try {
            Statement s = con.createStatement();
            if(check5.isSelected()){
                switch (count){
                    case 5:
                    {
                        s.executeUpdate("delete from NoteList where ID = 5;");
                        btnList5.setVisible(false);
                        check5.setSelected(false);
                        check5.setVisible(false);
                        count--;
                    }
                    break;
                    case 6:
                    {
                        s.executeUpdate("delete from NoteList where ID = 5;");
                        btnList5.setText(btnList6.getText());
                        noteList5=noteList6;
                        btnList6.setVisible(false);
                        check5.setSelected(check6.isSelected());
                        check6.setVisible(false);
                        count--;
                    }
                    break;
                    case 7:
                    {
                        s.executeUpdate("delete from NoteList where ID = 5;");
                        btnList5.setText(btnList7.getText());
                        noteList5=noteList7;
                        btnList7.setVisible(false);
                        check5.setSelected(check7.isSelected());
                        check7.setVisible(false);
                        count--;
                    }
                    break;
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 5;");
                        btnList5.setText(btnList8.getText());
                        noteList5=noteList8;
                        btnList8.setVisible(false);
                        check5.setSelected(check8.isSelected());
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
           }
           if((count+1)!=5){
                s.executeUpdate("update NoteList set ID=5 where ID="+(count+1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    //Delete btnList6
    private void DeleteBtnList6(){
        try {
            Statement s = con.createStatement();
            if(check6.isSelected()){
                switch (count){
                    case 6:
                    {
                        s.executeUpdate("delete from NoteList where ID = 6;");
                        btnList6.setVisible(false);
                        check6.setSelected(false);
                        check6.setVisible(false);
                        count--;
                    }
                    break;
                    case 7:
                    {
                        s.executeUpdate("delete from NoteList where ID = 6;");
                        btnList6.setText(btnList7.getText());
                        noteList6=noteList7;
                        btnList7.setVisible(false);
                        check6.setSelected(check7.isSelected());
                        check7.setVisible(false);
                        count--;
                    }
                    break;
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 6;");
                        btnList6.setText(btnList8.getText());
                        noteList6=noteList8;
                        btnList8.setVisible(false);
                        check6.setSelected(check8.isSelected());
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
           }
           if((count+1)!=6){
                s.executeUpdate("update NoteList set ID=6 where ID="+(count+1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //Delete btnList7
    private void DeleteBtnList7(){
        try {
            Statement s = con.createStatement();
            if(check7.isSelected()){
                switch (count){
                    case 7:
                    {
                        s.executeUpdate("delete from NoteList where ID = 7;");
                        btnList7.setVisible(false);
                        check7.setSelected(false);
                        check7.setVisible(false);
                        count--;
                    }
                    break;
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 7;");
                        btnList7.setText(btnList8.getText());
                        noteList7=noteList8;
                        btnList8.setVisible(false);
                        check7.setSelected(check8.isSelected());
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
           }
           if((count+1)!=7){
                s.executeUpdate("update NoteList set ID=7 where ID="+(count+1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //Delete btnList8
    private void DeleteBtnList8(){
        try {
            Statement s = con.createStatement();
            if(check8.isSelected()){
                switch (count){
                    case 8:
                    {
                        s.executeUpdate("delete from NoteList where ID = 8;");
                        btnList8.setVisible(false);
                        check8.setSelected(false);
                        check8.setVisible(false);
                        count--;
                    }
                    break;
                }
           }
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //show the checkbox delete
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
            if(checkDelete){
               DeleteBtnList8();
               DeleteBtnList7();
               DeleteBtnList6();
               DeleteBtnList5();
               DeleteBtnList4();
               DeleteBtnList3();
               DeleteBtnList2();
               DeleteBtnList1();
               btnCancelActionPerformed(evt);
                //thuc hien xoa lan luoc tu 1 den 8 btn
            }else{
                btnCancel.setVisible(true);
                checkDelete=true;
                if(count==1 && btnList1.getText().length()!=0)
                check1.setVisible(true);
                else
                {
                    if(count==2 && btnList2.getText().length()!=0)
                    {
                        check1.setVisible(true);
                        check2.setVisible(true);
                    }
                    else
                        if(count==3 && btnList3.getText().length()!=0)
                        {
                            check1.setVisible(true);
                            check2.setVisible(true);
                            check3.setVisible(true);
                        }
                        else
                            if(count==4 && btnList4.getText().length()!=0)
                            {
                                check1.setVisible(true);
                                check2.setVisible(true);
                                check3.setVisible(true);
                                check4.setVisible(true);
                            }
                            else
                                if(count==5 && btnList5.getText().length()!=0)
                                {
                                    check1.setVisible(true);
                                    check2.setVisible(true);
                                    check3.setVisible(true);
                                    check4.setVisible(true);
                                    check5.setVisible(true);
                                }
                                else
                                    if(count==6 && btnList6.getText().length()!=0)
                                    {
                                        check1.setVisible(true);
                                        check2.setVisible(true);
                                        check3.setVisible(true);
                                        check4.setVisible(true);
                                        check5.setVisible(true);
                                        check6.setVisible(true);
                                    }
                                    else
                                        if(count==7 && btnList7.getText().length()!=0)
                                        {
                                            check1.setVisible(true);
                                            check2.setVisible(true);
                                            check3.setVisible(true);
                                            check4.setVisible(true);
                                            check5.setVisible(true);
                                            check6.setVisible(true);
                                            check7.setVisible(true);
                                        }
                                        else
                                            if(count>=8 && btnList8.getText().length()!=0)
                                            {
                                                    check1.setVisible(true);
                                                    check2.setVisible(true);
                                                    check3.setVisible(true);
                                                    check4.setVisible(true);
                                                    check5.setVisible(true);
                                                    check6.setVisible(true);
                                                    check7.setVisible(true);
                                                    check8.setVisible(true);
                                            }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    //exit delete
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        check1.setVisible(false);
        check2.setVisible(false);
        check3.setVisible(false);
        check4.setVisible(false);
        check5.setVisible(false);
        check6.setVisible(false);
        check7.setVisible(false);
        check8.setVisible(false);
        btnCancel.setVisible(false);
        checkDelete=false;
    }//GEN-LAST:event_btnCancelActionPerformed

    /*----------moved over form list stack-------------*/
    private void btnList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList1ActionPerformed
        // TODO add your handling code here:
        noteList1.set(1, btnList1.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList1);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList1ActionPerformed

    private void btnList2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList2ActionPerformed
        // TODO add your handling code here:
        noteList2.set(2, btnList2.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList2);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList2ActionPerformed

    private void btnList3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList3ActionPerformed
        // TODO add your handling code here:
        noteList3.set(3, btnList3.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList3);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList3ActionPerformed

    private void btnList4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList4ActionPerformed
        // TODO add your handling code here:
        noteList4.set(4, btnList4.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList4);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList4ActionPerformed

    private void btnList5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList5ActionPerformed
        // TODO add your handling code here:
        noteList5.set(5, btnList5.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList5);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList5ActionPerformed

    private void btnList6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList6ActionPerformed
        // TODO add your handling code here:
        noteList6.set(6, btnList6.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList6);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList6ActionPerformed

    private void btnList7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList7ActionPerformed
        // TODO add your handling code here:
        noteList7.set(7, btnList7.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList7);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList7ActionPerformed

    private void btnList8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnList8ActionPerformed
        // TODO add your handling code here:
        noteList8.set(8, btnList8.getText());
        ListTaskForm listTaskForm =new ListTaskForm(this,noteList8);
        listTaskForm.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnList8ActionPerformed
    /*---------------END-------------*/
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        form.setVisible(checkShowForm);
        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // TODO add your handling code here:
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url="jdbc:sqlserver://DESKTOP-AHIBAGF\\SQLEXPRESS:1433;databaseName=ManagerStudentDatabase;user=sa;password=sa2008";
            try {
                con = DriverManager.getConnection(url);
                Statement s=con.createStatement();
                ResultSet rs=s.executeQuery("select max(ID) from NoteList");
                rs.next();
                count=rs.getInt(1);
                rs=s.executeQuery("select * from NoteList");
                for(int i=1;i<=count;i++){
                    rs.next();
                    switch (i){
                        case 1:
                        {
                            btnList1.setText(rs.getString(1));
                            btnList1.setVisible(true);
                        }
                        break ;
                        case 2:
                        {
                            btnList2.setText(rs.getString(1));
                            btnList2.setVisible(true);
                        }
                        break;
                        case 3:
                        {
                            btnList3.setText(rs.getString(1));
                            btnList3.setVisible(true);
                        }
                        break;
                        case 4:
                        {
                            btnList4.setText(rs.getString(1));
                            btnList4.setVisible(true);
                        }
                        break;
                        case 5:
                        {
                            btnList5.setText(rs.getString(1));
                            btnList5.setVisible(true);
                        }
                        break;
                        case 6:
                        {
                            btnList6.setText(rs.getString(1));
                            btnList6.setVisible(true);
                        }
                        break;
                        case 7:
                        {
                            btnList7.setText(rs.getString(1));
                            btnList7.setVisible(true);
                        }
                        break;
                        case 8:
                        {
                            btnList8.setText(rs.getString(1));
                            btnList8.setVisible(true);
                        }
                        break;
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(List.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Connect success
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(List.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new List().setVisible(true);
            }
        });
    }
    //connection
    private Connection con;
    //decare objects
    private NoteList noteList1=new NoteList(1);
    private NoteList noteList2=new NoteList(2);
    private NoteList noteList3=new NoteList(3);
    private NoteList noteList4=new NoteList(4);
    private NoteList noteList5=new NoteList(5);
    private NoteList noteList6=new NoteList(6);
    private NoteList noteList7=new NoteList(7);
    private NoteList noteList8=new NoteList(8);
    //decare variable for class
    private int count=0;
    private Boolean checkDelete=false;
    private MainFor form=new MainFor();
    private Boolean checkShowForm=false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Content;
    private javax.swing.JTextField TextNameList;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnList1;
    private javax.swing.JButton btnList2;
    private javax.swing.JButton btnList3;
    private javax.swing.JButton btnList4;
    private javax.swing.JButton btnList5;
    private javax.swing.JButton btnList6;
    private javax.swing.JButton btnList7;
    private javax.swing.JButton btnList8;
    private javax.swing.JCheckBox check1;
    private javax.swing.JCheckBox check2;
    private javax.swing.JCheckBox check3;
    private javax.swing.JCheckBox check4;
    private javax.swing.JCheckBox check5;
    private javax.swing.JCheckBox check6;
    private javax.swing.JCheckBox check7;
    private javax.swing.JCheckBox check8;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
